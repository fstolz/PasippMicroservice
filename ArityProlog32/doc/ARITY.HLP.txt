PREDICATE LISTING
Arity/Prolog32 Version 1.1
September 1995
Copyright (c) 1995, Arity Corporation
-------------------------------------

;
	Specifies a disjunction of goals.

!
	The cut goal; controls and limits searches.

[! !]
	Snips; the goal or goals within the snip symbols are skipped
	during backtracking.

E1 < E2
	Determines whether the value of E1 is less than E2.

T1 = T2
	Attempts to unify T1 and T2.

T1 \= T2
	Fails if T1 unifies with T2.

Struct =.. List
	Referred to as univ. Converts a structure to a list, or a
	list to a structure.

E1 =< E2
	Determines whether the value of E1 is less than or equal to
	the value of E2.

E1 > E2
	Determines whether the value of E1 is greater than the value
	of E2.

E1 >= E2
	Determines whether the value of E1 is greater than or equal
	to the value of E2.

E1 =:= E2
	Determines whether the values of E1 and E2 are equal.

E1 =\= E2
	Determines whether the values of E1 and E2 are not equal.

T1 == T2
	Determines whether terms T1 and T2 are equivalent.

\+ P
	Succeeds if the goal P fails; fails if P succeeds. Same as
	not(P).

T1 \== T2
	Determines whether terms T1 and T2 are not equivalent.

T1 @< T2
	Determines whether T1 is before T2.

T1 @=< T2
	Determines whether T1 is before or equal to T2.

T1 @> T2
	Determines whether T1 is after T2.

T1 @>= T2
	Determines whether T1 is after or equal to T2.

[Filename,Filename,...]
	Reads clauses into the database from a file with the consult
	predicate. -Filename uses the reconsult predicate.

abolish(+Name/Arity)
	Removes all clauses with the specified name and arity from
	the database.

abort(+Code)
	Goes to restart predicate. If there is no restart predicate,
	a compiled program halts and interpreted program returns to
	the interpreter.

api_mono
	Converts environment to black and white. If you save your
	database, any changes become permanent.

arg(+N,+Term,-Value)
	Unifies Value with the Nth argument of a term.

arg0(+N,+Term,-Value)
	Unifies Value with the N+1th argument of a term.

argrep(+Term,+N,+Arg,-Newterm)
	Replaces the Nth argument in a term with Arg and returns the
	result to Newterm.

assert(+Clause)
	Adds a clause to a predicate. Equivalent to assertz.

assert(+Clasue,+N)
	Adds a clause to a predicate as the Nth clause.

asserta(+Clause)
	Adds a clause to the beginning of a chain of clauses for a
	predicate.

assertz(+Clause)
	Adds a clause to the end of a chain of clauses for a
	predicate.

atom(?X)
	Succeeds when X is an atom.

atom_string(?Atom,?String)
	Converts an atom to a string, or a string to an atom. If
	both Atom and String are instantiated, checks for
	equivalence. (Since atoms and strings are equivalent, this
	predicate unifies it's arguments and fails if they are not
	a string).

atomic(?X)
	Succeeds if X is an atomic data type.

bagof(?Term,+Goal,-Bag)
	Returns in an unordered list (Bag) all instances of Term
	where Goal is satisfied.

betweenb(+BTree,?Key1,?Key2,?Relation1,?Relation2,?Key,?Term)
	Returns the terms in a b-tree between Key1 and Key2. The
	Relation1 and Relation2 arguments indicate whether the limit
	keys are returned and can be <, >, or =.

betweenkeysb(+BTree,?Key1,?Key2,?Key)
	Returns only the keys between Key1 and Key2 in a b-tree.

bit_count(+Int,-Count)
	Returns a count of the number of bits in an integer that
	have a value of 1.

bit_lit(+Bit,+Int)
	Succeeds if a specified bit has the value of 1 within the
	integer.

bit_unlit(+Bit,+Int)
	Succeeds if a specified bit has the value of 0 within the
	integer.

break
	Suspends execution of a program and places you at the
	interpreter prompt. You can resume the program by pressing
	Ctrl-z.

btree_count(+Btree,-/+Count)
	Returns the number of keys in the btree.

bwscreen
	Suceeds if the current system is running a monochrome
	monitor.

call(+P)
	Calls the interpreted goal P and succeeds if P succeeds.

call(+A,+P)
	Calls the interpreted goal P and succeeds if P succeeds using the
	address structure generated by evalAddress/2.

case(+[A1 -> B1, A2 -> B2,...|C])
	Executes B1 if A1 succeeds, else executes B2 if A2 succeeds,
	and so on. If none of the situations succeed, C is executed.

case(+[A1 -> B1, A2 -> B2,...])
	Executes B1 if A1 succeeds, else executes B2 if A2 succeeds,
	and so on. If none of the situations succeed, case succeeds.

chdir(?Path)
	Changes or returns the current directory.

chmod(+Filename,?Attributes)
	Changes or returns the attribute byte of a file.

clause(+Head,-Body)
	Unifies Head and Body with the respective head and body of a
	clause. Head must be instantiated.

close(+Handle)
	Closes the file specified by the handle.

cls
	Clears the current window and moves the cursor to the upper
	left corner.

code_world(?Old,?New)
	Unifies the name of the current code world with Old and then
	changes the current code world to New.

command_string(-X)
	Returns a command line argument as a string, including any
	spaces between the command and the first argument. The format of
	this string is system dependent.

compare(-Comp,+T1,+T2)
compare(-Comp,+T1,+T2,+Case)
	Compares terms T1 and T2 in the standard order and unifies
	Comp with a comparison value. Comparison values are: =, <,
	and >. The Case argument can be used to specify the case
	sensitivity of the comparison: 0 - sensitive;
	1 - insensitive.

concat(+String1,+String2,-Result)
	Concatenates two strings or atoms and returns the new string
	to Result. An ASCII code can be used for a string if it is a
	single character.

concat(+[String1,String2,...], -Result)
	Concatenates two or more strings or atoms and returns the new
	string to Result. An ASCII code can be used for a string if
	it is a single character.

consult(+Filename)
	Reads clauses into the database from a file, appending the
	clauses to any already in the database.

create(-Handle,+Filename)
	Creates and opens a new file for writing and returns the
	file's handle. If Filename already exists, the new file
	overwrites the existing file.

create_popup(?/+Label,?/+ULCorner,?/+LRCorner,?/+Attributes)
create_popup(?/+Label,?ULCorner,?LRCorner,?Attributes,?/+Border)
	Creates a pop-up window.

create_world(+World_name)
	Creates a new world with the world name specified.

ctr_dec(+Ctr,-X)
	Decrements a counter and returns the counter's previous
	value.

ctr_inc(+Ctr,-X)
	Increments a counter and returns the counter's previous
	value.

ctr_is(+Ctr,-X)
	Returns the current value of a counter.

ctr_set(+Ctr,+X)
	Sets a counter to the specified value.

current_op(?Prec,?Assoc,?Op)
	Returns through backtracking the operator definitions
	currently in the database.

current_predicate(?Predicate)
	Returns through backtracking the predicates that are in the
	current code world. If instantiated, the Predicate argument
	can be a predicate name or name/arity.

current_window(-Old,?New)
	If New is instantiated, changes the current window to New.
	If New is uninstantiated, returns the name of the current
	window.

data_world(?Old,?New)
	Unifies the name of the current data world with Old and
	then changes the current data world to New.

date(?date(Year,Month,Day))
	Sets the system clock to the date specified or returns the
	current date.

date_day(+date(Year,Month,Day),-WeekDay)
	Returns the day of the week for a given date as an integer
	between 0 (Sunday) and 6 (Saturday).

dbcs2term(+Ptr,-Term)
	Decodes the C string at Ptr as Term.

dbPartition(-OldPartition,+NewPartition)
	Gets / sets the default database partition.

dbs2term(+DBString,-Term)
	Decodes the Prolog string DBString as Term.

dbsLen(+Term,-Len)
	Returns the byte length of the string that would be created
	using term2dbs/2 or term2dbcs/4.

debug
debug(+File)
	Turns the debugger on, initialy set to leep mode. If File is
	specified, then it is created and debugger output is echoed
	into the File.

debugger
	Provides debug statistics on current debug mode and spied
	predicates.

dec(+N,-X)
	Decrements by 1 the integer N to the value X.

define_window(+Name,?/+Label,?ULCorner,?LRCorner,?Attributes)
define_window(+Name,?/+Label,?ULCorner,?LRCorner,?Attributes,?/+Border)
	Creates a stay-up window.

defineb(+BTree,+SplitSize,+Uniqueness,+Order)
defineb(+BTree,+SplitSize,+Uniqueness,+Order,+Case)
	Defines the attributes for a b-tree.


defineh(+Table_Name,+HashBuckets)
	Defines the number of hash buckets to be used in a hash table.

delete(+Filename)
	Deletes the specified file.

delete_window(+Name)
	Deletes the window specified by Name.

delete_world(+World_name)
	Deletes a world.

dialog_run(+Dialog)
dialog_run(+Dialog,+User_function)
dialog_run(+Dialog,+User_function,+Hook)
	Runs a dialog box.

directory(+Path,-Name,-Mode,-Time,-Date,-Size)
	Lists the directory files specified by Path. The Mode can be:
	    1 - read only;
	    2 - hidden;
	    4 - system file excluded from normal directory searches;
	    16 - directory;
	    32 - archive.

disk(?DiskName)
	Sets or returns the default disk drive to the letter
	specified. If instantiated, do not specify the colon with
	DiskName.

display(+Term)
display(+Handle,+Term)
	Writes a term in prefix Polish form to the standard output
	device or the specified file Handle.

dll_load(+Name,-Handle,-NewFlag)
	This predicate run-time loads a DLL.  The operating system handle
	is returned as an integer in Handle.  The NewFlag variable will
	be 1 if this was the first time dll_load was called for this
	DLL, otherwise it will be 0.

dll_free(+NameOrHandle)
	Frees a DLL that was loaded using dll_load/3. The name must
	exactly match the name used when the DLL was loaded.
	If NameOrHandle is an integer, then this predicate unloads the DLL
	of that handle.  This is used when the DLL was loaded by some means
	other than dll_load/3.

dll_handle(?DllName,?DllHandle)
	Enumerates the name-to-handle table.

dll_address(+NameOrHandle,+Item,-Address)
	This predicate looks up addresses of exported items in a DLL.  You
	can specify the DLL by name or handle.	Item is either:
	    (a) An integer:  look up the address by ordinal.
	    (b) A predicate specification Func/Arity:  look up the name
		corresponding to the Prolog predicate.
	    (c) An atom:  look up the entrypoint by name.
	The address is returned as an integer in the Address variable.

dll_visi(+NameOrHandle,+Enable)
	DLLs can be built to automatically manage
	their own visible definitions - adding them when the DLL is loaded
	and removing them when the DLL is unloaded.  This predicate allows
	additional control over the process.  It can be used when the DLL
	is not built to autoload or it can be used to remove the visible
	definitions associated with a DLL without unloading the DLL.
	NameOrHandle is as in dll_address/3.  Enable is 1 to add the
	visible definitions or 0 to remove them.
	In order for this predicate to work the DLL must export its
	visible table definitions.

edit(+Filename)
	Switches from the interpreter to a user-specified editor to
	edit the file specified as Filename. The file is reconsulted
	when the editor is exited.

eq(?X,?Y)
	Determines whether X and Y are the same data object.

erase(+Ref)
	Removes the term stored under the given reference number and
	keeps track of the terms which are erased.

eraseall(+Key)
	Removes all terms stored under the key.

errcode(-OldCode,+NewCode)
	Returns the most recent syntax or file I/O error message
	code as OldCode, and sets the code to NewCode.

evalAddress(+Goal,+Address)
	Looks up the address of a visible predicate for use by the call/2
	predicate.

exit_dbox(+Key)
	Sends the appropriate focus(kill,New) messages and exits the
	dialog_run predicate.

exit_popup
	Deletes the current pop-up window.

expand_term(+Term,-Newterm)
	Transforms a term using definite clause grammar notation
	into its equivalent Prolog term.

expunge
	Eliminates system references to deleted database terms.

fail
	This goal always fails.

file_list(+Filename)
	Saves the contents of the database to the file specified by
	Filename.

file_list(+Filename,+Name/Arity)
	Saves the clauses specified by Name/Arity to the file
	specified by Filename.

fileerrors(?Old,?New)
	Enables or disables DOS I/O error messages or checks the
	setting of these messages. To enable, set New to on. To
	disable, set New to off.

findall(?Term,+Goal,-List)
	Collects all instances of Term where Goal is satisfiable and
	returns these instances of Term in an unordered list. All
	free variables are assumed to be existentially quantified.

float(?X)
	Succeeds if X is a floating-point number.

float_text(?Number,?Text,?Format)
	Converts a number to a string according to a
	Format specification or it converts a string to a floating-
	point number. The Format argument can be: general - trailing
	0s suppressed; fixed(N) - fixed format with N digits to the
	right of the decimal point; scientific(N) - scientific format
	with N digits to the right of the decimal point.

flush
	Removes all characters in the type-ahead buffer.

functor(?Struct,?Name,?Arity)
	Returns a structure's name and arity.

gc
	Restores unused stack space.

get(?Char)
get(+Handle,?Char)
	Reads the next character from the standard input device or
	the specified file Handle, skipping non-printing characters,
	and unifies the ASCII value with Char.

get0(?Char)
get0(+Handle,?Char)
	Reads the next character from the standard input device or
	specified file Hanlde and unifies the ASCII value with Char.
	The get0 predicate does not skip non-printing characters.


get0_noecho(?Char)
	Reads the next character from the standard input device and
	unifies the ASCII value with Char. The get0_noecho predicate
	does not echo the character to the standard output device.

get_bit(+Bit,+Int,-Value)
	Returns the Value (either 0 or 1) of a specified bit within
	an integer.

get_cursor(-Low_scan,-High_scan)
	Reports the current shape of the cursor.

getEnvVar(+Variable,-/+Valve)
	Allows you to get environment variable. If you do not
	specify a variable, it fails.

ground(?Term)
	Succeeds if Term is ground (does not contain variables).

halt
	Exits from the interpreter or from the compiled application.

halt(+Exit_code)
	Exits from the interpreter or compiled program with the exit
	code specified by Exit_code.

hard_erase(+Ref)
	Erases the database term with the specified key. Unlike
	erase, the hard_erase predicate does not keep track of
	erased terms.

hide_window(?Current,+New)
	Makes the window specified by New the current window and
	removes the existing current window Current) from the screen
	display.

ifthen(+P,+Q)
	Executes goal Q if goal P succeeds. If goal P fails, ifthen
	succeeds without executing Q.

ifthenelse(+P,+Q,+R)
	Executes goal Q if goal P succeeds, otherwise executes
	goal R.

in(+Port,?Byte)
	Reads a byte from the specified I/O port.

inc(+N,-X)
	Increments by 1 the number N to the value X.

instance(+Ref,-Term)
	Returns the term associated with the reference number.

int_text(?Integer,?Text)
	Converts an integer to a string or a string to an integer.
	If both instantiated, compares for equivalence.

integer(?X)
	Succeeds if X is an integer.


X is E
	Evaluates E and unifies the value with X.

key(+Key,-Ref)
	Returns the reference number for the key.

key_count(+Key,-Count)
	Returns a count of the number of terms stored under a
	database key.

keyb(-Ascii,-Scan)
keyb(-Ascii,-Scan,-/+Flags)
	Reads the next character from the keyboard and returns the
	character's ASCII and Scan codes. If specified, a set of
	Flags is returned as the summation of the following:
	    1 right shifting key pressed
	    2 left shifting key pressed
	    4 control key pressed
	    8 Alt key pressed
	    16 Scroll Lock active
	    32 Num Lock active
	    64 Caps Lock active
	    128 Insert Mode is active

keyb_peek(-Ascii,-Scan)
keyb_peek(-Ascii,-Scan,-/+Flags)
	Reads the next character from the keyboard and returns the
	character's ASCII and Scan codes, and does not remove the
	key from the buffer. If specified, a set of Flags can be
	returned detailing the state of other keyboard keys. (see
	keyb  predicate)

keys(?Key)
	Returns the name and arity for a key in the current data
	world. If Key is instantiated, succeeds if the key exists in
	the current data world.

keysort(+L1,-L2)
	Sorts the list L1 in the standard order. Elements of the
	list must have the form: Key-Value. Duplicates are not
	merged. The sorted list is returned in L2.

leash(+Mode)
	Leashes ports as specified by Mode, where Mode can be full,
	tight, half, or loose.

length(+List,-N)
	Returns the length, N, of a character list.


list_text(?List,?String)
	Converts a list of characters to a string, or converts an
	atom or string	to a list of characters.

listing
	Writes to standard output all the predicates in the current
	code world.

listing(+Name)
listing(+Name/Arity)
listing(+[Name/Arity,Name/Arity])
	Writes to standard output all the clauses in the current
	code world for the specified predicate or list of
	predicates.

load_key(+Filename,+Key)
	Loads the contents of files into the database.

lock
	Used for "locking out" the ability for a Ctrl-Break to
	immediately terminate a program. The lock predicate adds 1
	to the system's counting semaphore. Should be used in
	conjunction with unlock.

mkdir(+Path)
	Creates a new directory. If Path is a full pathname
	(including drive name and directory names), then directory
	is created as specified. If Path is a name without a path,
	then the directory is created under the current directory.

move_window(+Rows,+Columns)
	Moves the current window the number of rows and columns
	specified.

mth_ref(+Ref,+Dir,-NewRef)
	Returns either the previous (Dir = -1) or next (Dir = 1)
	database reference number to the specified Ref.

name(?Atom,?List)
	Converts a list to an atom or converts an atom or integer to
	a list.

nl
nl(+Handle)
	Writes a newline to the standard output device or specified
	file Handle.

nodebug
nodebug(-File)
    Turns the debugger off. If specified, the name of the File that
    debugger output was formerly echoed to is returned.

nonvar(?X)
	Succeeds if X is not an uninstantiated variable.

nospy(+Name)
nospy(+Name/Arity)
	Removes a spy point from the specified predicate.

not(+P)
	Fails if the goal P can be satisfied; succeeds if not.

notrace
notrace(+File)
	Turns the debugger off. If specified, the name of the File
	that debugger output was formerly echoed to is returned.
	Same as nodebug.

nref(+Ref,-Next)
	Returns the reference number of the next term in the chain
	of terms having the same key.

nth_char(+N,-String,-Char)
	Returns the ASCII code of a character at offset N from the
	beginning of the string.

nth_ref(+Key,+N,-Ref)
	Returns the reference number for the term some number of
	positions from the top of a chain of
	terms.

number(?X)
	Succeeds when X is either an integer or a floating-point
	number.

op(+Prec,+Assoc,+Op)
	Defines the precedence, position, and associativity of an
	operator.

open(-Handle,+Filename,+Access)
	Opens an existing file. The Access argument can be:
	r - read; w - write;  a - append; rw - read/write;
	ra - read/append.

out(+Port,+Byte)
	Writes a byte to the specified I/O port.

p_open(-/+Handle,+Filename,+Access)
	Opens the file specified by Filename. If the file isn't in
	the current directory, p_open searches for it in the
	directories indicated in the path specification in the
	autoexec.bat file.

p_open(-Handle,+Filename,+Type,+Pathvar)
	Opens the file specified by Filename. Pathvar lets you include
	a path variable such as include, help or a path.

pfname(+FileName,?/+Prefix,?/+Name,?/+Extension,?/+HasExt)
	Parses a file name into it's component path prefix, name and
	extension. HasExt is returned as either `y or `n to denote
	whether or not an extension was specified.

pref(+Ref,-Prev)
	Returns the reference number for the previous term in a chain
	of terms.

put(+Char)
put(+Handle,+Char)
	Writes the character to the standard output device or
	specified file Handle.


randomize(+Seed)
	Resets the random number generator. The Seed argument is an
	integer.

read(-Term)
read(+Handle,-Term)
	Reads a term from the standard input device or specified
	file Handle.

read_ascib(+Handle,+Text)
	Reads a text field from a file Handle where the length of
	the text is contained in the first byte (8-bits) read from
	the file.

read_asciw(+Handle,+Text)
	Reads a text field from a file Handle where the length of
	the text is contained in the first word (16-bits) read from
	the file.

read_asciz(+Handle,+Text)
	Reads a zero terminated text field from a file Handle.

read_asciz_field(+Handle,+Width,+Text)
	Reads a zero terminated text field of a specified width
	from a file Handle.

read_float(+Handle,+Float)
	Reads the next 8-bytes from a file Handle as an integer.

read_int8(+Handle,+Integer)
	Reads the next 8-bits from a file Handle as an integer.

read_int16(+Handle,+Integer)
	Reads the next 16-bits from a file Handle as an integer.

read_int32(+Handle,+Integer)
	Reads the next 32-bits from a file Handle as an integer.

read_line(+Handle,-Line)
	Reads a line from the file specified by Handle.

read_string(+MaxLength,-String)
read_string(+Handle,+MaxLength,-String)
	Reads a string of MaxLength characters from the standard
	input device or specified file Handle.

recolor_window(+Battr,+Border)
	Changes the background/text and border attributes for the
	current window.

reconsult(+Filename)
	Reads clauses into the database from a file, replacing any
	predicates that are already present in the database with
	those clauses that also occur in the file.

record_after(+Ref,?Term,-Newref)
	Adds a term after Ref and returns the new reference number
	for the added term.

record_before(+Ref,?Term,-Newref)
	Adds a term before Ref and returns the new reference number
	for the added term.

record_visi(+Goal,+Type,+Offset)
	Low level access to the visible table.	Type is
	1-prolog, 2-eval, 3-evalpost, and offset is the address
	of the predicate.

	To remove the visible definition set Type=0.

recorda(+Key,?Term,-Ref)
	Adds a term to the beginning of a predicate, and returns the
	reference number assigned to the added term.

recordb(+BTree,+Sort_Key,+Term)
	Records terms in a b-tree.

recorded(+Key,?Term,-Ref)
	Returns through backtracking the terms and associated
	reference numbers stored under a given key.

recorded(+Key,+Dir,?Term,-Ref)
	Returns through backtracking the terms and associated
	reference numbers stored under a given key. The search
	order is specified with the Dir argument: 1 - forward;
	0 - reverse.

recorded_nth(+Key,+N,-Term,-Ref)
	Returns the Nth term stored under a database key and it's
	associated reference number.

recorded_ref(+Ref,+Dir,?Term,-Ref)
	Returns through backtracking the terms and associated
	reference numbers stored at and prior to or after a
	specified database reference number. The search order is
	specified with the Dir argument: 1 - forward; 0 - reverse.

recorded_terms(+Key,?Match,-Terms)
	Returns in a list all terms stored under a key that unify
	with the provided Match.

recorded_tro(+Key,?Term,-Ref)
	Returns through backtracking the terms and associated
	reference numbers stored under a given key. The recorded_tro
	predicate uses tail recursion optimization and thus can be
	more efficient than the recorded predicate.

recordh(+Table_name,+Sort_key,+Term)
	Records terms in a hash table.

recordz(+Key,?Term,-Ref)
	Adds a term to the end of a predicate and returns the
	reference number assigned to the term.

ref(?X)
	Succeeds when X is a database reference number.

refPartition(+Ref,-Partition)
	Returns the partition a database ref is stored in.

refresh
	Redraws all the windows on the screen.

region_c(+(ULR,ULC),+(LRR,LRC),?String)
	Reads characters from the current window and stores them in
	a non-compacted string.

region_ca(+(ULR,ULC),+(LRR,LRC),?String)
	Reads characters and attributes from the current_window and
	stores them in a compacted string.

region_cc(+(ULR,ULC),+(LRR,LRC),?String)
	Reads characters from the current window and stores them in
	a compacted string.

relabel_window(+Label)
	Changes the label for the current window.

removeallb(+BTree)
	Deletes a b-tree.

removeallh(+Table_name)
	Deletes a hash table.

removeb(+BTree,+Sort_key,?Term)
	Deletes a term from a b-tree. If Term is uninstantiated, then
	the first term under Sort_key is deleted.

removeb(+BTree,+Sort_key)
	Deletes all terms from a a b-tree that are associated with a
	particular Sort_key.

removeh(+Table_name,+Sort_key,?Term)
	Deletes a term from a hash table. If Term is uninstantiated,
	then the first term under Sort_key is deleted.

rename(+Filename,+NewName)
	Changes the name of a file.

repeat
	Always succeeds, and when encountered during backtracking,
	always succeeds again.

replace(+Ref,+Term)
	Replaces the term having the specified reference number with
	the term given by the Term argument.

replaceb(+BTree,+Sort_key,+Old_term,+New_term)
	Replaces the term at a specific position in a b-tree.

replaceh(+Hashtable,+Key,?Term0,+Term)
	If Term0 is stored in the hash table under the given key,
	then it is replaced with Term.

repos_window((+X1,Y1),(+X2,Y2))
	Repositions current window with the coordinates given.

reset_op
	Returns the operator definitions to their default values.

resetspy
	Clears all spy points.

resize_window(+Rows,+Columns)
	Resizes the current  window by adding or subtracting the
	number of rows and columns indicated.

restore
	Eliminates all changes made to the database since the last
	time it was saved.

restore(+Name)
	Restores the database specified by Name.

retract(+Clause)
	Removes the first occurrence of the specified clause from
	the database.

retrieveb(+BTree,?Sort_key,?Term)
	Returns a term from a b-tree.

retrieveb_keys(+BTree,-Keys)
	Returns all of the Keys in a b-tree in a list.

retrieveb_nth(+BTree,+N,-Sort_key)
	Returns the Nth key in a b-tree.

retrieveb_terms(+BTree,-Terms)
	Returns all of the Terms in a b-tree in a list.

retrieveb_terms(+BTree,+Sort_key,-Terms)
	Returns all of the Terms associated with a specified
	Sort_key in a b-tree in a list.

retrieveh(+Table_name,?Sort_key,?Term)
	Returns a term from a hash table.

rmdir(+Path)
	Deletes a directory.

save
	Saves all changes made to the current database since the
	last time it was saved.

save(+Name)
	Saves internal database file with the given Name.

scan_code(+Ascii,-Scan)
	Returns the Scan code associated with an Ascii code.

screen_height(?/+Old,?/+New)
	Lets you change screen height to 25, 43(both EGA and VGA),
	or 50 (VGA only).

searchPath(+PathSpec,+FileSpec,+Flags,-/+CompleteFileSpec)
	Lets you look for a file on disk. The PathSpec tells it how
	to search. If you want to know the environment variable, you
	must specify the second flag bit. Flag 1 = Search current
	directory; Flag 2 = PathSpec is an environment variable;
	Flag 3 = Search the application directory.

see(+Filename)
	Opens a file for reading and makes it the current input
	device.

see_h(+Handle)
	The previously open file specified by Handle becomes the
	current input file.

seeing(?Filename)
	Returns the name of the file that was opened for reading by
	see. If you used see_h, then seeing will fail.

seek(+Handle,+Offset,+Method,-NewLoc)
	Moves the internal file pointer to a specific location
	within a file. The Offset represents a relative location
	within the file in bytes. The Method indicates point from
	which Offset is calculated and can be: bof - beginning of
	file; eof - end of file; current - current location.

seen
	Ends input from the current open file and closes the file.

send_control_msg(+Msg,+Ctrl,+Key)
	Sends the messages specified by Msg to the specified dialog
	box control.

send_dialog_msg(+Function_name,+Msg,+Key)
	Sends the message specified by Msg to the dialog box
	manager.

send_menu_msg(+Msg,-Value)
	Sends a menu message.

set_bit(+Bit,+NewValue,+OldInt,-NewInt,-OldValue)
	Sets the value of a bit in an integer, returning the new
	integer and the old value of the bit.

set_bits(+OldInt,+Mask,+Data,-NewInt)
	Set a number of bits defined with a Mask to the values
	defined with Data in an integer.

set_control(+ControlNum)
	Informs the dialog box manager that the control has
	accepted focus. All subsequent messages are then sent to
	this control by the dialog box manager.

set_cursor(+Low_scan,+High_scan)
	Changes the shape of the cursor to that defined by Low_scan
	and High_scan.

set_cursorshape(+Shape)
	This predicate lets you change the shape of your cursor with
	one of four selections: 0 hides the cursor, 1 specifies a
	block, 2 specifies a semi-block and 3 provides an underline

setof(?Term,+Goal,-Set)
	Collects all instances of Term where the Goal is satisfiable
	and returns those instances in an ordered list without
	duplicates (Set).

setup_editor(+Bkgrnd,+Border,+Status,+ROE,+SOE,+Indent)
	Changes the colors and preference settings of the
	Arity/Prolog32 editor.

shell
	Allows you to run an OS/2 command interpreter while maintaining
	your current program state. Type exit to return. This predicate
	always succeeds.

shell(+Command)
	Executes an command and succeeds.

skip(+Char)
	Reads and skips characters from the standard input device
	until Char is found.

skip(+Handle,+Char)
	Reads and skips characters from a file until Char is found.

sort(+L1,-L2)
	Sorts the list L1 in the standard order, merging duplicates,
	and returns the sorted list in L2.

sortkey(+Key)
	Sorts the terms contained in a database key.

spy(+Name)
spy(+Name/Arity)
	Specifies a predicate as a spy point for debugging.

statistics
	Displays a window which lists all of the Arity/Prolog32 system
	usage statistics. Also available in vanilla mode.

statistics(+Info,-Struct)
	Returns information about Arity/Prolog32 system usage. The
	Info argument can be stacks, database, local, global, trail,
	garbage, version, edb, cache.

stdin(+Filename,+Goal)
	Redirects standard input for the duration of the goal.

stdinout(+InFile,+OutFile,+Goal)
	Redirects the standard input and output for the duration of
	the goal.

stdout(+Filename,+Goal)
	Redirects the standard output for the duration of the goal.

store_windows
	Stores the current state of the windows.

string(?X)
	Succeeds if X is a string.

string_length(+String,?Length)
	Returns the length of the string. If Length is instantiated,
	succeeds if Length is the length of String.

string_lower(+Text,-Lower)
	Converts a piece of Text to the equivalent lower-case
	string.

string_search(+SubString,+String,-Location)
	Searches a string for the substring and returns the starting
	point of the string to the Location argument. Location is
	offset from 0. This predicate can backtrack.

string_search(+Case,+SubString,+String,-Location)
	Searches a string for the substring and returns the starting
	point of the string to the Location argument. Location is
	offset from 0. If Case is set to 0, the search is case
	sensitive. If Case is set to 1, the search is not case
	sensitive. This predicate can backtrack.

string_term(?String,?Term)
	Converts a string or atom to a term or converts a term to a
	string.

string_termq(?/+Quotestring,?/+Term)
	Version of string_term that works like writeq.

string_upper(+Text,-Lower)
	Converts a piece of Text to the equivalent lower-case
	string.

substring(+InString,+N,+Length,-OutString)
	Extracts a substring from a string. The N argument
	identifies the beginning of the substring (string characters
	are numbered from 0). The Length argument indicates the
	length of the substring.

syntaxerrors(?Old,?New)
	Enables or disables Arity/Prolog32 syntax errors or checks the
	current setting of these messages.

system(?Predicate)
	Determines whether Predicate is an evaluable predicate. If
	instantiated, Predicate can be name or name/arity.

system(?Predicate,-Old,+New)
	This predicate allows you to disable a visible definition.
	Use as a get / set where 'on' means that the predicate is disabled.

sysflag(+FlagNo,-Old,+New)
	Gets / sets the value of system flags; Only one system flag is
	currently available for users:
	    safesave enabled: FlagNo = 11, default off

tab(+Num)
	Writes a given number of spaces to the standard output
	device. The Num argument must be in the range 0-255.

tab(+Handle,+Num)
	Writes a given number of spaces to the file. The Num
	argument must be in the range 0-255.

tchar(-Char,-Attr)
	Returns the character and attribute at the current cursor
	position.

tell(+Filename)
	Opens a file for writing and makes it the current output
	file.

tell_h(+Handle)
	Writes to the previously opened file specified by Handle.

telling(?Filename)
	Returns the name of the file that was opened for writing by
	tell. If tell_h was used, telling fails.

term2dbcs(+Term,+Ptr,+MaxLen,-ActLen)
	Encodes Term as a C string at Ptr. If the length of the
	encoded string is larger than MaxLen then the predicate fails
	doing no work. The actual length written is returned in ActLen.
	Note that the string that is created is not null terminated and
	may contain embedded nulls.

term2dbs(+Term,-DBString)
	Encodes Term as the Prolog string DBString.

term_concat(+Functor,+Args,-Term)
	Returns a Term created from the provided functor and
	arguments.

tget(?Row,?Column)
	Returns the coordinates of the cursor location within the
	current window.

tget_screen(?Row,?Column)
	Returns the coordinates of the cursor location on the
	screen.

time(?time(Hours,Minutes,Seconds,Hundredths))
	Returns or sets the system clock.

tmove(+Row,+Column)
	Moves the cursor to the specified coordinates within the current
	window.

tmove_screen(+Row,+Column)
	Moves the cursor to the specified coordinates on the screen.

told
	Closes the file that is currently open for writing.

trace
	Turns the debugger on, initialy set to creep mode.

trace(+File)
	Turns on tracing, creates new file and stores tracing
	information in the file you specified.

true
	This goal always succeeds.

tscroll(+Count,+(ULR,ULC),+(LLR,LRC))
	Scrolls the area defined by the upper left ULR,ULC) and
	lower right (LLR,LRC) coordinates by the number of lines
	specified by Count.

unlock
	Subtracts 1 from the system's counting semaphore. Used in
	conjunction with lock to isolate a portion of code so that
	Ctrl-Break does terminate the program until processing of
	that portion is complete.

var(?X)
	Determines whether X is an uninstantiated variable.

varnames(?Term)
	Assigns a printable name to each variable in a term.

wa(+Count,+Attribute)
	Changes the attribute byte for the number of character
	positions specified by Count, starting from the current
	cursor location.

wc(+Count,+Char)
	Writes the number of copies of the character to the current
	window starting from the current cursor location.

wca(+Count,+Char,+Attribute)
	Writes to the standard output device a given number of
	copies of a character with the specified attribute.

what_btrees(-Btree)
	Returns, through backtracking, the names of each of the
	existing b-trees.

what_windows(?Name)
	Returns, through backtracking, the name of the windows that
	currently exist.

what_worlds(?X)
	Returns, through backtracking, the name of the worlds that
	currently exist.

which_control(-CtrlNum)
	Returns the number of the dialog box control that is in
	focus.

window_info(?/+Name,?/+Label,?/+ULCorner,?/+LRCorner,?/+Attributes)
window_info(?/+Name,?/+Label,?/+ULCorner,?/+LRCorner,?/+Attributes,?/+Border)
	Returns window information.

workspace(-OldWorkspaceNumber,+NewWorkspaceNumber)
	Gets / sets the current database workspace number (0 ..3).

write(+Term)
	Writes the term to the standard output device.

write(+Handle,+Term)
	Writes the term to the specified file.

write_ascib(+Handle,+Text)
	Writes a Text field to a file Handle preceeded by the
	length in a single byte (8-bits).

write_asciw(+Handle,+Text)
	Writes a Text field to a file Handle preceeded by the
	length in a single word (16-bits).

write_asciz(+Handle,+Text)
	Writes a zero terminated text field to a file Handle.

write_asciz_field(+Handle,+Width,+Text)
	Writes a zero terminated text field of a specified width
	to a file Handle.

write_ctrl_text(+Key,+Label)
	Writes a dialog box control label with the appropriate
	accelerator key attribute.

write_float(+Handle,+Float)
	Writes a floating-point number to a file Handle in an
	8-byte format.

write_int8(+Handle,+Integer)
	Writes an integer to a file Handle in a 8-bit format.

write_int16(+Handle,+Integer)
	Writes an integer to a file Handle in a 16-bit format.

write_int32(+Handle,+Integer)
	Writes an integer to a file Handle in a 32-bit format.


write_key(+Key,+File,+Backup)
	Writes the text key to ASCII file and if Backup is equal
	to 1 and there currently exists a version of File, it saves
	the old file as a .BAK file.

writeq(+Term)
	Writes the term to the standard output device, and quotes
	atoms and functors as necessary for the term to be readable
	as a Prolog term.

writeq(+Handle,+Term)
	Writes the term to the file specified, and quotes atoms and
	functors as necessary for the term to be readable as a Prolog
	term.
